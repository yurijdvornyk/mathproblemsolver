using PdfSharp.Drawing;
using PdfSharp.Pdf;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProblemSolverApp.Classes
{
    public class ProblemExporter
    {
        public string WatermarkText { get { return "Generated by MathProblemSolver application"; } }

        public void Write(ProblemItem problem, string filename)
        {
            PdfDocument document = new PdfDocument();
            PdfPage page = document.AddPage();
            page.TrimMargins.All = new XUnit(3, XGraphicsUnit.Centimeter);

            XGraphics gfx = XGraphics.FromPdfPage(page);

            int topMargin = 0;

            XFont normalFontSmall = new XFont("Verdana", 12);
            XFont normalFont = new XFont("Verdana", 14);
            XFont h3Font = new XFont("Verdana", 14, XFontStyle.Bold);
            XFont h2Font = new XFont("Verdana", 16, XFontStyle.Bold);
            XFont h1Font = new XFont("Verdana", 20, XFontStyle.Bold);

            gfx.DrawString("Generated by MathProblemSolver application", normalFontSmall, XBrushes.LightGray,
              new XRect(0, 0, page.Width, page.Height), XStringFormat.TopCenter);

            topMargin += normalFontSmall.Height + 10;

            gfx.DrawString(problem.Problem.Name, h1Font, XBrushes.Black,
                new XRect(0, topMargin, page.Width, h1Font.Height), XStringFormat.TopCenter);

            topMargin += h1Font.Height + 10;

            if (problem.Problem.IsInputDataSet)
            {
                gfx.DrawString("Input data: ", h3Font, XBrushes.Black, 
                    new XRect(0, topMargin, page.Width, h3Font.Height), XStringFormat.TopLeft);
                topMargin += h3Font.Height + 5;
                foreach (var i in problem.Problem.InputData)
                {
                    int margin = 120 + normalFont.Height + 5;
                    gfx.DrawString(i.Name, normalFont, XBrushes.Gray, 
                        new XRect(0, margin, 200, normalFont.Height), XStringFormat.TopLeft);

                    gfx.DrawString(i.Value.ToString(), normalFont, XBrushes.Gray, 
                        new XRect(0, margin, 200, normalFont.Height), XStringFormat.TopLeft);

                    topMargin += normalFont.Height + 3;
                }
            }

            topMargin += 10;

            if (problem.Problem.IsExecuted)
            {
                XImage img = XImage.FromFile(@"D:\Programs\Spot_DrawingTool\Spot\SpotTestApp\bin\Debug\result.png");
                double width = page.Width.Value;
                double coef = page.Width / img.Size.Height;
                double height = page.Height / coef;
                gfx.DrawImage(img, 0, topMargin, width, height);
            }

            filename = "temp_result.pdf";
            document.Save(filename);
            Process.Start(filename);
        }

        public void SaveToTex(ProblemItem problem, string filename)
        {
            StringBuilder fileContent = new StringBuilder();

            // documentclass
            // usepackage

            fileContent.Append("\\documentclass[a4paper]{article}\\usepackage[utf8]{inputenc}" + 
                "\\usepackage[left=3cm,right=3cm,top=3cm,bottom=3cm]{geometry}\\usepackage[english]{babel}" + 
                "\\usepackage[T1,T2A]{fontenc}\\usepackage{amssymb,amsmath}\\usepackage{tikz}\\usepackage{pgfplots}" + 
                "\\usepackage{color}\n\n");

            fileContent.Append("\\definecolor{light-gray}{gray}{0.5}\\pagenumbering{gobble}\n\n");

            // begin document
            // header

            fileContent.Append("\\begin{document}\\center\\textcolor{light-gray}{" + WatermarkText + 
                "\\linebreak" + DateTime.Today.Date.ToShortDateString() + "}\n\n\\vspace{15pt}\n\n");

            // title
            // equation

            fileContent.Append("\\begin{LARGE}\\textbf{" + problem.Problem.Name + "}\\end{LARGE}\n\n\\begin{equation*}" +
                problem.Problem.Equation + "\\end{equation*}\n\n\\vspace{20pt}\n\n");

            // input data
            fileContent.Append("\\begin{large}Input data:\\end{large}\n\n\\vspace{10pt}\n\n" +
                "\\begin{tabular}{l l l}\nParameter & Data Type & Value" + @"\\ \hline");
            foreach (var i in problem.Problem.InputData)
            {
                fileContent.Append("\n$" + i.Name + "$ & \\texttt{" + i.Type + "} & \\texttt{" + i.Value + @"} \\");
            }

            fileContent.Append("\n\\hline\\end{tabular}\n\n\\vspace{20pt}\n\n");

            fileContent.Append("\\begin{large}Plot:\\end{large}\n\n\\vspace{20pt}");

            // plot
            var title = (string[])problem.Problem.Result.Title;
            fileContent.Append(@"\begin{tikzpicture}\begin{axis}[width=\textwidth,xlabel=" + title[0].ToString() + 
                ",ylabel=" + title[1].ToString() + "]" + @"\addplot[black] coordinates {");

            var values = ((object[,])problem.Problem.Result.Value);

            for (int i = 0; i < values.GetLength(0); ++i)
            {
                fileContent.Append("(" + values[i, 0].ToString().Replace(",",".") + "," + values[i, 1].ToString().Replace(",", ".") + ")");
            }
            //fileContent.Append("(-2.5,2.5) (-1,1) (0,0) (1,1) (2.5,2.5)");

            fileContent.Append("};\n\\end{axis}\\end{tikzpicture}");

            // end
            fileContent.Append("\n\\end{document}");

            using (StreamWriter outfile = new StreamWriter(filename))
            {
                outfile.Write(fileContent.ToString());
            }
        }
    }
}
